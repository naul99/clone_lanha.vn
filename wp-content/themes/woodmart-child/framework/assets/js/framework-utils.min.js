/**!
 * Eevee Utils v1.1.5
 * Utility functions for Eevee Plugin
 */
!(function (e) {
  (window.Eevee = new (class {
    constructor(e) {
      this.eeveeVersion = "1.1.5";
    }
    init(e) {
      const t = { ...{ themeVersion: void 0 }, ...e };
      (this.themeVersion = t.themeVersion),
        this.dataLink(),
        this.dataToggle(),
        this.dataBackToTop(),
        this.browserDetect(),
        this.smoothScroll(),
        this.scrollDirection(),
        this.disableTitleTag(),
        this.backgroundParallax();
    }
    hasjQuery() {
      return "undefined" != typeof jQuery;
    }
    isjQueryElement(e) {
      return "undefined" != typeof jQuery && e instanceof jQuery;
    }
    getOffset(e) {
      if (!e.getClientRects().length) return { top: 0, left: 0 };
      const t = e.getBoundingClientRect(),
        o = e.ownerDocument.defaultView;
      return { top: t.top + o.pageYOffset, left: t.left + o.pageXOffset };
    }
    waitForEl(e, t, o = 100) {
      document.querySelectorAll(e).length
        ? t()
        : setTimeout(() => {
            this.waitForEl(e, t, o);
          }, o);
    }
    dataLink() {
      document.querySelectorAll("[data-link]").forEach((e) => {
        e.addEventListener("click", (e) => {
          window.location.href = e.currentTarget.getAttribute("data-link");
        });
      });
    }
    dataToggle(e) {
      const t = {
        ...{
          target: document.querySelectorAll("[data-toggle]"),
          toggleTarget: document.querySelector("html"),
          closestSelector: "",
        },
        ...e,
      };
      t.target.forEach((e) => {
        e.addEventListener("click", (e) => {
          const o = e.currentTarget,
            r = o.getAttribute("data-toggle");
          let n = o.getAttribute("data-toggle-closest");
          n = n || t.closestSelector;
          const i = !!n && o.closest(n);
          r &&
            (e.preventDefault(),
            i ? i.classList.toggle(r) : t.toggleTarget.classList.toggle(r));
        });
      });
    }
    dataBackToTop(t) {
      const o = {
        ...{ target: document.querySelectorAll("[data-btt]") },
        ...t,
      };
      o.target.forEach((t) => {
        t.addEventListener("click", (t) => {
          t.preventDefault(),
            this.hasjQuery() && o.duration
              ? e("html,body").animate({ scrollTop: 0 }, o.duration)
              : window.scrollTo({ top: 0, behavior: "smooth" });
        });
      });
    }
    browserDetect() {
      void 0 !== window.jQBrowser
        ? document
            .querySelector("html")
            .classList.add(window.jQBrowser.name, window.jQBrowser.platform)
        : console.warn("jQuery Browser is undefined!"),
        void 0 !== navigator.brave &&
          navigator.brave.isBrave().then(function () {
            document.querySelector("html").classList.add("brave");
          });
    }
    smoothScroll() {}
    scrollDirection(e = document.querySelector(".ev-scroll-top-offset")) {
      void 0 !== window.scrollDirection
        ? window.scrollDirection.init({
            topOffset: () => (null !== e ? e.offsetHeight : 0),
          })
        : console.warn("ScrollDirection is undefined!");
    }
    disableTitleTag(e) {
      ({ target: document.querySelectorAll("a, img"), ...e }.target.forEach(
        (e) => {
          e.addEventListener("mouseenter", (e) => {
            e.currentTarget.setAttribute(
              "data-org-title",
              e.currentTarget.getAttribute("title")
            ),
              e.currentTarget.setAttribute("title", "");
          }),
            e.addEventListener("mouseleave", (e) => {
              e.currentTarget.setAttribute(
                "title",
                e.currentTarget.getAttribute("data-org-title")
              );
            });
        }
      ));
    }
    keepSameHeight(e, t) {
      let o,
        r,
        n = "",
        i = {
          target: "",
          breakpoint: void 0,
          onUpdate: (e) => {},
          onResize: (e) => {},
        };
      const a = (e, t) =>
        e.forEach((e) => (e.style.height = t ? `${t}px` : ""));
      this.isjQueryElement(e)
        ? (r = e)
        : "object" == typeof e &&
          ((i = { ...i, ...e }), (r = i.target), (t = i.breakpoint)),
        (r = this.isjQueryElement(r) ? [...r] : e),
        r.length &&
          1 !== r.length &&
          requestAnimationFrame(function e() {
            requestAnimationFrame(e);
            const l = window.innerWidth;
            if (o === l) return;
            o = l;
            let s = 0;
            "function" == typeof i.onResize &&
              i.onResize({ maxHeight: n, width: l }),
              void 0 !== t && l <= t
                ? (s = "")
                : (a(r, ""),
                  r.forEach((e) => {
                    s = Math.max(s, e.offsetHeight);
                  })),
              s !== n &&
                ((n = s),
                "function" == typeof i.onUpdate &&
                  i.onUpdate({ maxHeight: n, width: l })),
              a(r, n);
          });
    }
    uniqueId(e = "") {
      return (
        e +
        (+new Date()).toString(16) +
        ((1e8 * Math.random()) | 0).toString(16)
      );
    }
    slugify(e = "") {
      return e
        .toLowerCase()
        .replace(/[^\w ]+/g, "")
        .replace(/ +/g, "-");
    }
    backgroundParallax(
      e = document.querySelectorAll("[data-parallax]:not(.parallax-enabled)")
    ) {
      e.length &&
        ("string" == typeof e
          ? (e = document.querySelectorAll(e))
          : this.isjQueryElement(e) && (e = e.get()),
        e.forEach((e, t) => {
          let o,
            r = "";
          const n = e.querySelector(":scope > img"),
            i =
              n &&
              getComputedStyle(n).objectFit.length &&
              !e.style.backgroundImage.length;
          r = i ? "object-fit" : "background-image";
          const a = e.getAttribute("data-parallax"),
            l = parseFloat(a),
            s = a.length && !isNaN(l);
          (r = s ? "translate" : r),
            e.classList.add(`parallax-${r}`),
            e.classList.add("parallax-enabled");
          const c = () => {
            const t =
              (window.pageYOffset || document.documentElement.scrollTop) -
              (document.documentElement.clientTop || 0);
            if (o !== t) {
              o = t;
              const r = 0.5 * window.innerHeight + 0.5 * e.offsetHeight,
                a = this.getOffset(e).top + 0.5 * e.offsetHeight;
              let c = 0.5 * window.innerHeight;
              a <= r && (c = a);
              const d =
                document.body.clientHeight -
                this.getOffset(e).top -
                e.offsetHeight +
                0.5 * e.offsetHeight;
              d <= r && (c = window.innerHeight - d);
              const u = a - (t + c);
              if (u > -r && u < r)
                if (s) n.style.transform = `translateY(${u * l}px)`;
                else {
                  const t = `center ${50 + (u / r) * 50}%`;
                  i
                    ? (n.style.objectPosition = t)
                    : (e.style.backgroundPosition = t);
                }
            }
            window.requestAnimationFrame(c);
          };
          window.requestAnimationFrame(c);
        }));
    }
  })()),
    e && (e.fn.Eevee = window.Eevee);
})(jQuery);
